if("${CMAKE_SOURCE_ROOT_DIR}" STREQUAL "")
	if(CMAKE_VERSION VERSION_GREATER "3.20")
		cmake_path(GET CMAKE_CURRENT_SOURCE_DIR PARENT_PATH CMAKE_SOURCE_ROOT_DIR)
	else()
		get_filename_component(CMAKE_SOURCE_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH )
	endif()
endif()

set(CMAKE_CURRENT_INCLUDE_DIR ${CMAKE_SOURCE_ROOT_DIR}/include)
set(TARGET ${PROJECT_LIBRARY_NAME})

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
	message(STATUS CMAKE_VERSION=${CMAKE_VERSION})
	message(STATUS CMAKE_CURRENT_INCLUDE_DIR=${CMAKE_CURRENT_INCLUDE_DIR})
	message(STATUS CMAKE_CURRENT_SOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR})
endif()

if(MSVC)
	set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()
# 이 프로젝트의 실행 파일에 소스를 추가합니다.
add_subdirectory(${PROJECT_LIBRARY_CHECKSUM})
add_subdirectory(${PROJECT_LIBRARY_HASH})
add_library(${TARGET} SHARED "VS3Common.cpp" "Base32.cpp" "PartialKey.cpp")
set_target_properties(${TARGET} PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
target_include_directories(${TARGET} PRIVATE ${CMAKE_CURRENT_INCLUDE_DIR})
target_link_libraries(${TARGET} PRIVATE ${PROJECT_LIBRARY_CHECKSUM} ${PROJECT_LIBRARY_HASH})
target_compile_options(${TARGET} PRIVATE -Wall)

if(CMAKE_VERSION VERSION_GREATER 3.12)
	set_property(TARGET ${PROJECT_LIBRARY_HASH} PROPERTY CXX_STANDARD 20)
endif()